// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Artwork extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Artwork entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Artwork entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Artwork", id.toString(), this);
  }

  static load(id: string): Artwork | null {
    return store.get("Artwork", id) as Artwork | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get artist(): Bytes {
    let value = this.get("artist");
    return value.toBytes();
  }

  set artist(value: Bytes) {
    this.set("artist", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get currentPrice(): BigInt {
    let value = this.get("currentPrice");
    return value.toBigInt();
  }

  set currentPrice(value: BigInt) {
    this.set("currentPrice", Value.fromBigInt(value));
  }

  get soldPriceHistory(): Array<BigInt> | null {
    let value = this.get("soldPriceHistory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set soldPriceHistory(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("soldPriceHistory");
    } else {
      this.set(
        "soldPriceHistory",
        Value.fromBigIntArray(value as Array<BigInt>)
      );
    }
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }
}
